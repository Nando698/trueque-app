next-env.d.ts:
<code>
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

</code>

next.config.ts:
<code>
import type { NextConfig } from "next";

const nextConfig = {
  images: {
    domains: ['localhost'],
  },
};

module.exports = nextConfig;

</code>

package.json:
<code>
{
  "name": "trueque-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@faker-js/faker": "^9.7.0",
    "@mui/icons-material": "^7.1.0",
    "@mui/material": "^7.0.2",
    "axios": "^1.9.0",
    "jwt-decode": "^4.0.0",
    "next": "15.3.1",
    "postcss": "^8.5.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-slick": "^0.30.3",
    "slick-carousel": "^1.8.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-slick": "^0.23.13",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "tailwindcss": "^4.1.4",
    "typescript": "^5"
  }
}

</code>

README.md:
<code>
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

</code>

tsconfig.json:
<code>
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

</code>

src\app\globals.css:
<code>
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

</code>

src\app\layout.tsx:
<code>

// These styles apply to every route in the application
import './globals.css'
import Header from '@/components/Header'
import Footer from '@/components/Footer'


 
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <Header />
        {children}
        <Footer />
        
      </body>
    </html>
  )
}
</code>

src\app\page.tsx:
<code>

import Main from '../components/Main'

export default function Page() {
  return (
    <>
      <Main />
    </>



  )
}

</code>

src\app\admin\page.tsx:
<code>
'use client';

import { useState, useEffect } from 'react';
import { validarToken } from '@/connect/auth';
import {
  Box,
  Container,
  Typography,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  AppBar,
  Toolbar,
  IconButton,
  Snackbar,
  Alert,
} from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import AdminUsuariosContainer from '@/containers/AdminUsuariosContainer';
import AdminCategoriasContainer from '@/containers/AdminCategoriasContainer';
import AdminReportesContainer from '@/containers/AdminReportesContainer';

export default function AdminPage() {
  const [seccionActiva, setSeccionActiva] = useState<'usuarios' | 'categorias' | 'reportes'>('usuarios');
  const [sidebarAbierto, setSidebarAbierto] = useState(true);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMsg, setSnackbarMsg] = useState<string>('');

  const mostrarSnackbar = (mensaje: string) => {
    setSnackbarMsg(mensaje);
    setSnackbarOpen(true);
  };

  const handleCloseSnackbar = () => setSnackbarOpen(false);

  useEffect(() => {
    validarToken().then((valido) => {
      if (!valido) window.location.href = '/login';
    });
  }, []);

  return (
    <Box sx={{ backgroundColor: '#0d1b2a', minHeight: '100vh', display: 'flex' }}>
      {sidebarAbierto && (
        <Drawer
          variant="permanent"
          sx={{
            width: 240,
            flexShrink: 0,
            [`& .MuiDrawer-paper`]: {
              width: 240,
              boxSizing: 'border-box',
              backgroundColor: '#1b263b',
              color: 'white',
            },
          }}
        >
          <Box sx={{ p: 2 }}>
            <Typography variant="h6">Admin</Typography>
          </Box>
          <List>
            {['usuarios', 'categorias', 'reportes'].map((sec) => (
              <ListItem disablePadding key={sec}>
                <ListItemButton
                  selected={seccionActiva === sec}
                  onClick={() => setSeccionActiva(sec as any)}
                >
                  <ListItemText primary={`Gestión de ${sec}`} />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        </Drawer>
      )}

      <Box sx={{ flexGrow: 1 }}>
        <AppBar position="static" sx={{ backgroundColor: '#1b263b' }}>
          <Toolbar>
            <IconButton
              edge="start"
              color="inherit"
              onClick={() => setSidebarAbierto(!sidebarAbierto)}
              sx={{ mr: 2 }}
            >
              <MenuIcon />
            </IconButton>
            <Typography variant="h6" sx={{ flexGrow: 1 }}>
              Panel de Administración
            </Typography>
          </Toolbar>
        </AppBar>

        <Container maxWidth="md" sx={{ py: 4 }}>
          {seccionActiva === 'usuarios' && (
            <AdminUsuariosContainer onError={mostrarSnackbar} />
          )}
          {seccionActiva === 'categorias' && (
            <AdminCategoriasContainer onError={mostrarSnackbar} />
          )}
          {seccionActiva === 'reportes' && (
            <AdminReportesContainer onError={mostrarSnackbar} />
          )}
        </Container>
      </Box>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity="error" sx={{ width: '100%' }}>
          {snackbarMsg}
        </Alert>
      </Snackbar>
    </Box>
  );
}
</code>

src\app\contacto\page.tsx:
<code>

export default function Page() {
    return (
      <>
Contacto page
      </>
  
  
  
    )
  }
</code>

src\app\faq\page.tsx:
<code>
import FAQContent from "@/components/FAQContent"

export default function Page() {
  return (
    <>
    <div className="bg-gray-800">
      <FAQContent />
      </div>
    </>
  )
}
</code>

src\app\login\page.tsx:
<code>
import Login from "@/components/Login";

export default function Page() {
  return (
    <>
    <div className="bg-gray-800">
      <Login />
      </div>
    </>
  );
}

</code>

src\app\ofertas\buscar\page.tsx:
<code>
import { Suspense } from 'react';
import BuscarResultados from '../../../components/BuscarResultados';

export default function BuscarPage() {
  return (
    <Suspense fallback={<p className="text-white p-4">Cargando resultados...</p>}>
      <BuscarResultados />
    </Suspense>
  );
}
</code>

src\app\perfil\page.tsx:
<code>

'use client'
import { obtenerFavoritos } from "@/connect/favs";
import { obtenerOfertasPropias } from "@/connect/ofertas";
import { obtenerUsuario } from "@/connect/users";
import { Oferta } from "@/interfaces/Oferta";
import { TokenPayload } from "@/interfaces/TokenPayLoad";
import { Usuario } from "@/interfaces/Usuario";
import {
  Avatar,
  Box,
  Typography,
  IconButton,
  Divider,
  Link,
  Button,
} from "@mui/material";
import { jwtDecode } from "jwt-decode";
import { useEffect, useRef, useState } from "react";
import { ArrowBackIos, ArrowForwardIos } from "@mui/icons-material";
import { aceptarOfrecimiento, obtenerOfrecimientosEnviados, obtenerOfrecimientosRecibidos, rechazarOfrecimiento } from '@/connect/ofrecimientos';
import { Ofrecimiento } from '@/interfaces/Ofrecimiento';
import PerfilOfrecimientosRecibidosContainer from "../../containers/PerfilOfrecimientosRecibidosContainer";
import MiniCard from "@/components/MiniCard";




const Perfil: React.FC = () => {
  const [userId, setUserId] = useState<number | null>(null);
  const [ofertasPropias, setOfertasPropias] = useState<Oferta[] | null>(null);
  const [favoritos, setFavoritos] = useState<Oferta[] | null>(null);
  const [perfil, setPerfil] = useState<Usuario | null>(null);
  const [pausadas, setPausadas] = useState<Oferta[] | null>(null);
  const [enviados, setEnviados] = useState<Ofrecimiento[]>();
  const [ofrecimientosRecibidos, setOfrecimientosRecibidos] = useState<Ofrecimiento[] | null>(null);
  const [mensajeContacto, setMensajeContacto] = useState<string | null>(null);



  const scrollRef1 = useRef<HTMLDivElement>(null!);
  const scrollRef2 = useRef<HTMLDivElement>(null!);
  const scrollRef3 = useRef<HTMLDivElement>(null!);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) return;

    const decoded = jwtDecode<TokenPayload>(token);
    const id = decoded.sub;
    setUserId(id);


    obtenerOfrecimientosRecibidos()
      .then(ofrecimientos => {
        console.log("OFRECIMIENTOS", ofrecimientos)
        const pendientes = ofrecimientos.filter(o => o.estado === 'PENDIENTE');
        setOfrecimientosRecibidos(pendientes);
      })
      .catch(console.error);


    obtenerOfrecimientosEnviados().then(ofrecimientos => {
      const activos = ofrecimientos.filter(o => o.oferta.estado === 'ACTIVA' && o.estado === 'PENDIENTE');
      setEnviados(activos);
      console.log("filtrados activos:", activos);
    })
      .catch(console.error);



    obtenerFavoritos()
      .then(({ data }) => {
        const activas = data.filter((o: { estado: string; }) => o.estado === 'ACTIVA');
        setFavoritos(activas);
      })
      .catch(console.error);


    obtenerUsuario(id).then(setPerfil);
    obtenerOfertasPropias(id, "ACTIVA").then(setOfertasPropias);
    obtenerOfertasPropias(id, "PAUSADA").then(setPausadas); 

  }, []);


  

  const scroll = (ref: React.RefObject<HTMLDivElement>, dir: "left" | "right") => {
    if (ref.current) {
      const { scrollLeft, clientWidth } = ref.current;
      const offset = dir === "left" ? -clientWidth : clientWidth;
      ref.current.scrollTo({ left: scrollLeft + offset, behavior: "smooth" });
    }
  };


  



  return (
    <div className="bg-gray-800 p-6">
      <div className="mx-auto bg-white rounded-lg shadow-lg p-6 lg:max-w-[1000px]" style={{ backgroundColor: "#ededed" }}>
        <div className="flex items-center mb-6">

          <Avatar alt="Avatar" sx={{ height: 75, width: 75 }} />
          <div className="ml-4">
            <h1 className="text-2xl font-bold text-black">{perfil?.nombre}</h1>
            <p className="text-gray-600">{perfil?.correo}</p>
          </div>
        </div>



        {ofertasPropias && ofertasPropias.length > 0 ? (
          <section>
            <Typography variant="h6" color="black" gutterBottom>
              Mis Publicaciones activas
            </Typography>
            <Box display="flex" alignItems="center" sx={{ backgroundColor: "#ededed" }}>
              <IconButton onClick={() => scroll(scrollRef1, "left")}>
                <ArrowBackIos />
              </IconButton>
              <Box
                ref={scrollRef1}
                sx={{
                  display: "flex",
                  overflowX: "auto",
                  gap: 2,
                  pb: 2,
                  scrollBehavior: "smooth",
                }}
              >
                {ofertasPropias.map((oferta) => (
                  <Box key={oferta.id} sx={{ minWidth: 300, flexShrink: 0 }}>
                    <Link href={`/publicacion/${oferta.id}`}> <MiniCard oferta={oferta} /></Link>

                  </Box>
                ))}
              </Box>
              <IconButton onClick={() => scroll(scrollRef1, "right")}>
                <ArrowForwardIos />
              </IconButton>
            </Box>
          </section>
        ) : (
          <Typography variant="h6" color="black" gutterBottom>
            No tenés publicaciones activas
          </Typography>
        )}

        <Divider sx={{ my: 4 }} />

        {favoritos && favoritos.length > 0 ? (
          <section className="mt-8">
            <Typography variant="h6" color="black" gutterBottom>
              Publicaciones favoritas
            </Typography>
            <Box display="flex" alignItems="center">
              <IconButton onClick={() => scroll(scrollRef2, "left")}> <ArrowBackIos /> </IconButton>
              <Box
                ref={scrollRef2}
                sx={{
                  display: "flex",
                  overflowX: "auto",
                  gap: 2,
                  pb: 2,
                  scrollBehavior: "smooth",
                }}
              >
                {favoritos?.map((oferta) => (
                  <Box key={oferta.id} sx={{ minWidth: 300, flexShrink: 0 }}>
                    <Link href={`/publicacion/${oferta.id}`}><MiniCard oferta={oferta} /></Link>
                  </Box>
                ))}
              </Box>
              <IconButton onClick={() => scroll(scrollRef2, "right")}> <ArrowForwardIos /> </IconButton>
            </Box>
          </section>
        ) : (
          <Typography variant="h6" color="black" gutterBottom>
            No tenés publicaciones favoritas
          </Typography>
        )}

        <Divider sx={{ my: 4 }} />

        {pausadas && pausadas.length > 0 ? (
          <section className="mt-8">
            <Typography variant="h6" color="black" gutterBottom>
              Publicaciones pausadas
            </Typography>
            <Box display="flex" alignItems="center">
              <IconButton onClick={() => scroll(scrollRef3, "left")}> <ArrowBackIos /> </IconButton>
              <Box
                ref={scrollRef1}
                sx={{
                  display: "flex",
                  overflowX: "auto",
                  gap: 2,
                  pb: 2,
                  scrollBehavior: "smooth",
                }}
              >
                {pausadas?.map((oferta) => (
                  <Box key={oferta.id} sx={{ minWidth: 300, flexShrink: 0 }}>
                    <Link href={`/publicacion/${oferta.id}`}><MiniCard oferta={oferta} /></Link>
                  </Box>
                ))}
              </Box>
              <IconButton onClick={() => scroll(scrollRef1, "right")}> <ArrowForwardIos /> </IconButton>
            </Box>
          </section>

        ) : (
          <Typography variant="h6" color="black" gutterBottom>
            No tenés publicaciones pausadas
          </Typography>
        )}

        <Divider sx={{ my: 4 }} />

        {enviados && enviados.length > 0 ? (
          <section className="mt-8">
            <Typography variant="h6" color="black" gutterBottom>
              Publicaciones contraofertadas por mí
            </Typography>
            <Box display="flex" alignItems="center">
              <IconButton onClick={() => scroll(scrollRef3, "left")}> <ArrowBackIos /> </IconButton>
              <Box
                ref={scrollRef3}
                sx={{
                  display: "flex",
                  overflowX: "auto",
                  gap: 2,
                  pb: 2,
                  scrollBehavior: "smooth",
                }}
              >
                {enviados.map((ofrec) => {
                  console.log('ofrec:', ofrec);
                  return (
                    <Box key={ofrec.id} sx={{ minWidth: 300, flexShrink: 0 }}>
                      <Link href={`/publicacion/${ofrec.oferta.id}`}>
                      <MiniCard oferta={ofrec.oferta} />
                      </Link>
                    </Box>
                  );
                })}

              </Box>
              <IconButton onClick={() => scroll(scrollRef3, "right")}> <ArrowForwardIos /> </IconButton>
            </Box>
          </section>
        ) : (
          <Typography variant="h6" color="black" gutterBottom>
            No realizaste contraofertas todavía
          </Typography>
        )}

        <Divider sx={{ my: 4 }} />

        {ofrecimientosRecibidos && ofrecimientosRecibidos.length > 0 ? (
          <PerfilOfrecimientosRecibidosContainer />
        ) : (
          <Typography variant="h6" color="black" gutterBottom>
            No recibiste ofrecimientos todavía.
          </Typography>
        )}
      </div>
    </div>
  );
};

export default Perfil;
</code>

src\app\publicacion\[id]\page.tsx:
<code>
'use client';

import React, { useEffect, useState } from 'react';
import {
  Box,
  Typography,
  ImageList,
  ImageListItem,
  Paper,
  CircularProgress,
  Button,
  Divider,
} from '@mui/material';

import Image from 'next/image';
import { obtenerIdActual, validarToken } from '@/connect/auth';
import { despausarOferta, finalizarOferta, obtenerUnaOferta, pausarOferta } from '@/connect/ofertas';
import { useParams } from 'next/navigation';
import { Oferta } from '@/interfaces/Oferta';
import ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import { jwtDecode } from "jwt-decode";
import { TokenPayload } from '@/interfaces/TokenPayLoad';
import Alert from '@mui/material/Alert';
import { OfrecerModal } from '@/components/OfrecerModal';
import { crearOfrecimiento } from '@/connect/ofrecimientos';



const OfertaDetalle = () => {
  const [oferta, setOferta] = useState<Oferta | null>(null);
  const [imagenActiva, setImagenActiva] = useState(0);
  const cambiarImagen = (i: number) => setImagenActiva(i);
  const [esPropia, setEsPropia] = useState(false);
  const [pausada, setPausada] = useState('');
  const [finalizada, setFinalizada] = useState('');
  const [mostrarModal, setMostrarModal] = useState(false);


  const params = useParams();
  const id = Number(params?.id);

  const estadoColor: Record<string, string> = {
    ACTIVA: 'green',
    PAUSADA: 'orange',
    FINALIZADA: 'red',
  };

  useEffect(() => {
    const cargarDatos = async () => {
      const valido = await validarToken();
      if (!valido) {
        window.location.href = '/login';
        return;
      }

      if (!id || isNaN(id)) return;

      const token = localStorage.getItem("token");
      const decoded = token ? jwtDecode<TokenPayload>(token) : null;

      try {
        const ofertaCargada = await obtenerUnaOferta(id);
        setOferta(ofertaCargada);
        if (decoded && ofertaCargada.usuario.id === decoded.sub) {
          setEsPropia(true);
        }
      } catch (error) {
        console.error('Error al obtener una oferta:', error);
      }
    };

    cargarDatos();
  }, [id]);

  const recargarOferta = async () => {
    try {
      const ofertaCargada = await obtenerUnaOferta(id);
      setOferta(ofertaCargada);
    } catch (error) {
      console.error('Error al recargar la oferta:', error);
    }
  };


  const handleOfrecer = async (id: number, msj: string) => {
    if (oferta) {
      crearOfrecimiento(id, msj)
        .then(() => {
          setMostrarModal(false);
          })
        .catch((err) => console.error('Error al crear ofrecimiento:', err));
    }
    
  }


  const handlePausar = (id: number) => {
    pausarOferta(id)
    setPausada('Oferta pausada')
    recargarOferta()
    setTimeout(() => {
      setPausada('');
    }, 3000);
  }

  const handleDespausar = (id: number) => {
    despausarOferta(id)
    setPausada('Oferta despausada')
    recargarOferta()
    setTimeout(() => {
      setPausada('');
    }, 3000);
  }

  const handleFinalizar = (id: number) => {
    finalizarOferta(id)
    setFinalizada('Oferta finalizada')
    recargarOferta()
    setTimeout(() => {
      setFinalizada('');
    }, 3000);
  }



  if (!oferta) {
    return (
      <Box
        sx={{
          height: '50vh',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
        }}
      >
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Paper
      elevation={6}
      sx={{
        maxWidth: 960,
        margin: 'auto',
        padding: { xs: 2, md: 4 },
        bgcolor: 'background.paper',
        borderRadius: 4,
        boxShadow: '0px 4px 20px rgba(0,0,0,0.1)',
      }}
    >
      <Typography
        variant="h4"
        component="h1"
        align="center"
        gutterBottom
        sx={{ fontWeight: 'bold', color: 'black' }}
      >
        {oferta.titulo}
      </Typography>

      <Box sx={{ display: 'flex', gap: 4, flexWrap: 'wrap' }}>
        {/* Imagen principal y miniaturas */}
        <Box
          sx={{
            flex: 1,
            minWidth: 280,
            bgcolor: 'white',
            borderRadius: 2,
            p: 2,
            boxShadow: 1,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
          }}
        >
          <Box
            sx={{
              position: 'relative',
              width: '100%',
              height: 240,
              borderRadius: 2,
              overflow: 'hidden',
              mb: 2,
            }}
          >
            <Image
              src={oferta.imagenes[imagenActiva]}
              alt={`Imagen ${imagenActiva + 1}`}
              fill
              style={{ objectFit: 'contain' }}
            />

            {imagenActiva > 0 && (
              <Box
                onClick={() => setImagenActiva(imagenActiva - 1)}
                sx={{
                  position: 'absolute',
                  left: 8,
                  top: '50%',
                  transform: 'translateY(-50%)',
                  cursor: 'pointer',
                  color: 'white',
                  backgroundColor: 'rgba(0,0,0,0.4)',
                  borderRadius: '50%',
                  p: '4px',
                }}
              >
                <ArrowBackIosNewIcon />
              </Box>
            )}

            {imagenActiva < oferta.imagenes.length - 1 && (
              <Box
                onClick={() => setImagenActiva(imagenActiva + 1)}
                sx={{
                  position: 'absolute',
                  right: 8,
                  top: '50%',
                  transform: 'translateY(-50%)',
                  cursor: 'pointer',
                  color: 'white',
                  backgroundColor: 'rgba(0,0,0,0.4)',
                  borderRadius: '50%',
                  p: '4px',
                }}
              >
                <ArrowForwardIosIcon />
              </Box>
            )}
          </Box>

          {oferta.imagenes.length > 1 && (
            <ImageList cols={3} gap={8} sx={{ width: '100%' }}>
              {oferta.imagenes.map((img, i) => (
                <ImageListItem
                  key={i}
                  sx={{
                    cursor: 'pointer',
                    position: 'relative',
                    height: 60,
                    opacity: i === imagenActiva ? 1 : 0.6,
                    transition: 'opacity 0.3s',
                  }}
                  onClick={() => cambiarImagen(i)}
                >
                  <Image
                    src={img}
                    alt={`Miniatura ${i + 1}`}
                    fill
                    style={{
                      borderRadius: 6,
                      border:
                        i === imagenActiva
                          ? '3px solid #1976d2'
                          : '1px solid #ccc',
                      objectFit: 'cover',
                    }}
                  />
                </ImageListItem>
              ))}
            </ImageList>
          )}
        </Box>

        {/* Detalles */}
        <Box
          sx={{
            flex: 1,
            minWidth: 280,
            bgcolor: '#f9f9f9',
            borderRadius: 3,
            p: 4,
            boxShadow: 2,
            display: 'flex',
            flexDirection: 'column',
            gap: 2,
          }}
        >
          <Box>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Descripción
            </Typography>
            <Typography variant="body1" color="text.primary">
              {oferta.descripcion}
            </Typography>
          </Box>

          <Box>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Productos a intercambiar
            </Typography>
            <Typography variant="body1" color="text.primary">
              {oferta.cambio}
            </Typography>
          </Box>

          <Box>
            <Typography variant="body2" color="text.secondary">
              <strong>Categoría:</strong> {oferta.categoria.nombre}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              <strong>Fecha de publicación:</strong>{' '}
              {new Date(oferta.fechaPublicacion).toLocaleDateString('es-AR')}
            </Typography>
          </Box>

          <Box>
            <Typography variant="body2" color="text.secondary">
              <strong>Estado:</strong>{' '}
              <Box
                component="span"
                sx={{
                  color: estadoColor[oferta.estado],
                  fontWeight: 'bold',
                  ml: 1,
                }}
              >
                {oferta.estado}
              </Box>
            </Typography>
          </Box>

          {esPropia && (
            <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 1 }}>
              <Divider />
              {oferta.estado === 'ACTIVA' && (
                <Button variant="contained" color="warning" onClick={() => handlePausar(oferta.id)}>
                  Pausar
                </Button>

              )}
              {pausada && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  {pausada}
                </Alert>
              )}
              {oferta.estado === 'PAUSADA' && (
                <Button variant="contained" color="success" onClick={() => handleDespausar(oferta.id)}>
                  Despausar
                </Button>
              )}

              {oferta.estado !== 'FINALIZADA' && (
                <Button variant="contained" color="error" onClick={() => handleFinalizar(oferta.id)}>
                  Finalizar
                </Button>
              )}





            </Box>
          )}

          {!esPropia && oferta.estado === 'ACTIVA' && (
            <Box sx={{ mt: 2 }}>
              <Button
                variant="contained"
                color="primary"
                onClick={() => setMostrarModal(true)}
              >
                Ofrecer intercambio
              </Button>
            </Box>
          )}




        </Box>

      </Box>

      <OfrecerModal
        open={mostrarModal}
        onClose={() => setMostrarModal(false)}
        onConfirm={(mensaje) => {handleOfrecer(oferta.id, mensaje)   
        }}
      />

    </Paper>
  );
};

export default OfertaDetalle;

</code>

src\app\publicar\page.tsx:
<code>
import PublicarOferta from "@/components/Publicar";
import { Suspense } from 'react';
export default function Page() {
    return (
      <Suspense>
<div className="bg-white">
  < PublicarOferta />
</div>
      </Suspense>
  
  
  
    )
  }
</code>

src\app\recuperar\page.tsx:
<code>
import Recuperar from "@/components/Recuperar";

export default function Page() {
    return (
      <>
    <Recuperar/>
      </>
  
  
  
    )
  }
</code>

src\app\register\page.tsx:
<code>
import RegisterPage from "@/components/Register";

export default function Page() {
    return (
      <>
<RegisterPage />
      </>
  
  
  
    )
  }
</code>

src\components\BuscarResultados.tsx:
<code>
'use client';

import { useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';
import OfferCard from './MainCard';
import { Oferta } from '@/interfaces/Oferta';
import { buscarOfertas } from '@/connect/ofertas';

export default function BuscarResultados() {
  const searchParams = useSearchParams();
  const categoriaId = searchParams.get('categoria_id');
  const keywords = searchParams.get('keywords');

  const [ofertas, setOfertas] = useState<Oferta[]>([]);

  useEffect(() => {
    if (!categoriaId && !keywords) return;

    const fetchOfertas = async () => {
      try {
        const data = await buscarOfertas(categoriaId ?? undefined, keywords ?? undefined);
        setOfertas(data);
      } catch (err) {
        console.error('Error buscando ofertas:', err);
      }
    };

    fetchOfertas();
  }, [categoriaId, keywords]);

  return (
    <main
  className="
    p-4
    grid
    grid-cols-1
    sm:grid-cols-2
    md:grid-cols-4
    gap-4
    place-items-center
    bg-[#1c1f2b]
    text-white
  "
>
      {ofertas.length === 0 ? (
        <p>No se encontraron ofertas.</p>
      ) : (
        ofertas.map((oferta) => (
          <OfferCard key={oferta.id} data={oferta} actions={true} />
        ))
      )}
    </main>
  );
}

</code>

src\components\catAdmin.tsx:
<code>
'use client';

import { Categoria } from '@/interfaces/Categoria';
import { Button, Paper, Stack, TextField, Typography } from '@mui/material';
import { useState } from 'react';

interface Props {
  categorias: Categoria[];
  onEliminar: (categoria: Categoria) => void;
  onCrear: (nombre: string) => void;
}

export default function CatAdmin({ categorias, onEliminar, onCrear }: Props) {
  const [nuevaCat, setNuevaCat] = useState('');

  return (
    <>
      <Typography variant="h5" gutterBottom color="white">
        Categorías
      </Typography>

      <Stack spacing={2} mb={2}>
        {categorias.map((cat, index) => (
          <Paper
            key={cat.id}
            sx={{
              p: 2,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}
          >
            <Typography>{cat.nombre}</Typography>
            <Button
              variant="outlined"
              color="error"
              onClick={() => onEliminar(cat)}
            >
              Eliminar
            </Button>
          </Paper>
        ))}
      </Stack>

      <Stack direction="row" spacing={2}>
        <TextField
          variant="outlined"
          label="Nueva Categoría"
          size="small"
          value={nuevaCat}
          onChange={(e) => setNuevaCat(e.target.value)}
          sx={{ bgcolor: 'white' }}
        />
        <Button
          variant="contained"
          onClick={() => {
            if (nuevaCat.trim() !== '') {
              onCrear(nuevaCat.trim());
              setNuevaCat('');
            }
          }}
        >
          Agregar Categoría
        </Button>
      </Stack>
    </>
  );
}

</code>

src\components\FAQContent.tsx:
<code>
import * as React from "react";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import Typography from "@mui/material/Typography";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

export default function FAQContent() {
  return (
    <>
      <div className="flex flex-col items-center text-center pt-10">
        <h1 className="text-2xl font-bold mb-4 font-sans">
          Preguntas Frecuentes
        </h1>
        <div className="space-y-6"></div>
      </div>
      <div className="flex justify-center mt-10">
        <div className="w-[70%]">
          <Accordion sx={{ backgroundColor: "#151c25" }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography component="span" sx={{ color: "white" }}>
                ¿Cómo funciona el sistema de trueque en esta plataforma?
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ color: "white" }}>
              Los usuarios publican los objetos o servicios que desean
              intercambiar, y otros pueden proponer un trueque con lo que
              ofrecen a cambio.
            </AccordionDetails>
          </Accordion>
        </div>
      </div>
      <div className="flex justify-center mt-10">
        <div className="w-[70%]">
          <Accordion sx={{ backgroundColor: "#151c25" }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography component="span" sx={{ color: "white" }}>
                ¿Es necesario registrarse para usar la plataforma?
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ color: "white" }}>
              Sí, debes crear una cuenta para publicar, recibir propuestas y
              concretar intercambios.
            </AccordionDetails>
          </Accordion>
        </div>
      </div>
      <div className="flex justify-center mt-10">
        <div className="w-[70%]">
          <Accordion sx={{ backgroundColor: "#151c25" }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography component="span" sx={{ color: "white" }}>
                Qué tipo de cosas puedo intercambiar?
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ color: "white" }}>
              Puedes ofrecer objetos físicos, servicios, o experiencias, siempre
              que respeten nuestras políticas.
            </AccordionDetails>
          </Accordion>
        </div>
      </div>
      <div className="flex justify-center mt-10">
        <div className="w-[70%]">
          <Accordion sx={{ backgroundColor: "#151c25" }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography component="span" sx={{ color: "white" }}>
                ¿Cuánto tiempo permanece activa mi publicación?
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ color: "white" }}>
              Las publicaciones no tienen tiempo de expiración, por lo que
              puedes mantener tus publicaciones sin necesidad de estar pendiente
              a su renovación.
            </AccordionDetails>
          </Accordion>
        </div>
      </div>
      <div className="flex justify-center mt-10">
        <div className="w-[70%]">
          <Accordion sx={{ backgroundColor: "#151c25" }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography component="span" sx={{ color: "white" }}>
                ¿Hay alguna comisión por usar la plataforma?
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ color: "white" }}>
              No, el servicio utilizado es gratuito y libre para todo el
              público.
            </AccordionDetails>
          </Accordion>
        </div>
      </div>
      <div className="flex justify-center mt-10">
        <div className="w-[70%]">
          <Accordion sx={{ backgroundColor: "#151c25" }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography component="span" sx={{ color: "white" }}>
                ¿Qué consejos me dan para tener un trueque exitoso?
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ color: "white" }}>
              Sé claro en tus descripciones, usa fotos reales, no cometas fraude
            </AccordionDetails>
          </Accordion>
        </div>
      </div>
      <div className="flex justify-center mt-10 pb-8">
        <div className="w-[70%]">
          <Accordion sx={{ backgroundColor: "#151c25" }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1-content"
              id="panel1-header"
            >
              <Typography component="span" sx={{ color: "white" }}>
                Que debo hacer si inhabilitan mi usuario?
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ color: "white" }}>
              En caso de que tu usuario sea bloqueado como penalización por
              infringir las normas, deberás mandar un mail para consultar sobre
              el estado de tu cuenta y si existe o no posibilidad de devolver la
              actividad de la misma
            </AccordionDetails>
          </Accordion>
        </div>
      </div>
    </>
  );
}

</code>

src\components\Footer.tsx:
<code>
import Link from "next/link";
import React from "react";

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-900 py-8">
      <div className="max-w-6xl mx-auto px-4">
        
        <div className="text-center mb-6">
          <div className="text-lg font-semibold">True? que app!</div>
        </div>

        
       

<div className="flex flex-col items-center space-y-4 text-sm">
  <Link href="/" className="hover:underline">
    Inicio
  </Link>
  <Link href="/faq" className="hover:underline">
    Preguntas Frecuentes
  </Link>
  <Link href="/contacto" className="hover:underline">
    Contacto
  </Link>
  <Link href="/terminos" className="hover:underline">
    Términos
  </Link>
</div>


        
        <div className="mt-6 border-t pt-4 text-xs text-center text-gray-500">
          © 2025 True? que app! Todos los derechos reservados.
        </div>
      </div>
    </footer>
  );
};

export default Footer;
</code>

src\components\Header.tsx:
<code>
'use client';

import React, { useEffect, useState } from 'react';
import { TextField, Button, Avatar } from '@mui/material';
import BasicMenu from './Menu';
import MultipleSelectCheckmarks from './SelectTag';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';

const Header: React.FC = () => {
  const pathname = usePathname();
  const router = useRouter();
  const showSearch = pathname !== '/login' && pathname !== '/register' && pathname !== '/recuperar';

  const [keywords, setKeywords] = useState('');
  const [categorias, setCategorias] = useState<string[]>([]); 
  const [nombreUsuario, setNombreUsuario] = useState<string>('');;


  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const query = new URLSearchParams();

    if (categorias.length > 0) {
      query.set('categoria_id', categorias.join(','));
    }

    if (keywords.trim()) {
      query.set('keywords', keywords.trim());
    }

    
    router.push(`/ofertas/buscar?${query.toString()}`);
  };

  useEffect( () => {
    const nombre = localStorage.getItem("nombre");
    if(nombre){
      setNombreUsuario(nombre)
    }

  },[]);



  return (
    <header className="bg-blue-400 border-b border-emerald-700 px-4 py-3 flex flex-col gap-4 sm:gap-5 md:flex-row md:items-center md:justify-between">
      <Link href={'/'}><h1 className="text-3xl text-white text-center md:text-left font-sans tracking-tight max-w-60">True? que app!</h1></Link>

      {showSearch && (
        <form onSubmit={handleSearch} className="flex flex-wrap items-center gap-2 justify-center md:justify-start">
         <MultipleSelectCheckmarks onChange={(selected) => setCategorias(selected)} />

          <TextField
            id="outlined-basic"
            label="Buscar..."
            variant="outlined"
            size="small"
            value={keywords}
            onChange={(e) => setKeywords(e.target.value)}
            sx={{
              backgroundColor: "#5897d6",
              minWidth: "120px",
              flexGrow: 1,
              maxWidth: "300px",
              marginLeft: { sm: '8px' },
            }}
          />
          <Button variant="contained" type="submit">Buscar</Button>
        </form>
      )}  
    {showSearch && (
      <div className="flex items-center justify-center md:justify-end gap-3">
        <BasicMenu />
        <p>Bienvenido {nombreUsuario}</p>
        <Avatar alt="Remy Sharp" />
      </div>

      )   }

    
    </header>
  );
};

export default Header;

</code>

src\components\Login.tsx:
<code>
'use client'
import { loguearse } from '@/connect/auth'
import Link from 'next/link'
import React from 'react'
import Alert from '@mui/material/Alert';

import { useState } from 'react'

const LoginPage: React.FC = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('');

  const manejarSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
  
    const { ok, error: mensajeError } = await loguearse(email, password);
    if (ok) {
      window.location.href = '/';
    } else {
      setError(mensajeError || 'Error desconocido');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-800">
      
      <form onSubmit={manejarSubmit} className="bg-white p-8 rounded-2xl shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center text-black">Iniciar sesión</h2>

        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            id="email"
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
          />
        </div>

        <div className="mb-6">
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">
            Contraseña
          </label>
          <input
            id="password"
            type="password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
          />
        </div>

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition"
        >
          Iniciar sesión
        </button>

        <div className="text-center mt-4 text-sm text-gray-600">
          ¿No tenés cuenta? <a href="/register" className="text-blue-600 hover:underline">Registrate</a>
        </div>
        <div className="text-center mt-4 text-sm text-gray-600">
          <Link href="/recuperar" className="text-blue-600 hover:underline">Recupera tu contraseña</Link>
        </div>
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}
      </form>
    </div>
  )
}

export default LoginPage;
</code>

src\components\Main.tsx:
<code>
'use client';

import React, { useEffect, useState } from 'react';
import { obtenerOfertas } from '../connect/ofertas';
import { validarToken } from '@/connect/auth';
import OfferCard from '@/components/MainCard';
import { Oferta } from '@/interfaces/Oferta';

const Main: React.FC = () => {
  const [ofertas, setOfertas] = useState<Oferta[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      const valido = await validarToken();
      if (!valido) {
        window.location.href = '/login';
        return;
      }

      try {
        const data = await obtenerOfertas();
        console.log("Ofertas:", data);

        const activas = data.filter((oferta: Oferta) => oferta.estado === 'ACTIVA');
        console.log("Ofertas activas:", activas);
        setOfertas(activas);
      } catch (error) {
        console.error('Error al obtener ofertas:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <main className="bg-gray-800 min-h-screen grid px-6 pb-8">
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {ofertas.length === 0 ? (
          <p className="text-white">No hay ofertas activas disponibles.</p>
        ) : (
          ofertas.map((oferta) => (
            <OfferCard key={oferta.id} data={oferta} actions={true} />
          ))
        )}
      </div>
    </main>
  );
};

export default Main;

</code>

src\components\MainCard.tsx:
<code>
'use client';

import { jwtDecode } from "jwt-decode";
import {
  Card,
  CardActions,
  CardContent,
  Button,
  Typography,
  Box,
  IconButton,
  MobileStepper,
  Link,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from "@mui/material";
import { useEffect, useState } from "react";
import { ArrowBackIos, ArrowForwardIos } from "@mui/icons-material";
import { TokenPayload } from "@/interfaces/TokenPayLoad";
import { borrarOferta } from "@/connect/ofertas";
import { guardarFavorito } from "@/connect/favs";
import Image from "next/image";
import { Oferta } from "@/interfaces/Oferta";
import ModalReporte from '../components/modalReporte';
import { reportarOferta } from "@/connect/reporte";

interface Props {
  data: Oferta;
  actions: boolean;
}

export default function OfferCard({ data, actions }: Props) {
  const [esAdmin, setEsAdmin] = useState(false);
  const [confirmOpen, setConfirmOpen] = useState(false);
  const [modalAbierto, setModalAbierto] = useState(false);
  const [agregadoFav, setAgregadoFav] = useState('');
  const soloFecha = data.fechaPublicacion.split("T")[0] ?? "Fecha no disponible";
  const imagenes = data.imagenes ?? [];
  const maxSteps = imagenes.length;
  const [activeStep, setActiveStep] = useState(0);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const token = localStorage.getItem("token");
      if (token) {
        const decoded = jwtDecode<TokenPayload>(token);
        setEsAdmin(decoded.rol === "ADMIN");
      }
    }
  }, []);

  const handleNext = () => {
    setActiveStep((prev) => (prev + 1) % maxSteps);
  };
  const handleBack = () => {
    setActiveStep((prev) => (prev - 1 + maxSteps) % maxSteps);
  };

  const handleFav = (id: number) => {
    guardarFavorito(id);
    setAgregadoFav('Oferta guardada!');
    setTimeout(() => setAgregadoFav(''), 3000);
  };

  const handleEliminar = async () => {
    try {
      await borrarOferta(data.id);
      // opcional: notificar al padre para recargar la lista
    } catch (e) {
      console.error(e);
    } finally {
      setConfirmOpen(false);
    }
  };

  const handleReportar = async (motivo: string) => {
    try {
      await reportarOferta(data.id, motivo);
    } catch (e) {
      console.error('Error al reportar:', e);
    } finally {
      setModalAbierto(false);
    }
  };

  return (
    <>
      <Card
        sx={{
          height: 400,
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          mt: 5,
          width: '100%',
          minWidth: 0,
        }}
      >
        {/* Slider de imágenes */}
        <Box
          position="relative"
          width="100%"
          height={{ xs: 290, sm: 270, md: 190 }}
          bgcolor="#fff"
        >
          {imagenes.length > 0 ? (
            <>
              <Box sx={{ position: "relative", width: "100%", height: "100%" }}>
                <Image
                  src={imagenes[activeStep]}
                  alt={`Imagen ${activeStep + 1}`}
                  fill
                  style={{ objectFit: "contain" }}
                />
              </Box>
              {maxSteps > 1 && (
                <>
                  <IconButton
                    onClick={handleBack}
                    sx={{
                      position: "absolute",
                      top: "50%",
                      left: 0,
                      transform: "translateY(-50%)",
                    }}
                  >
                    <ArrowBackIos fontSize="small" />
                  </IconButton>
                  <IconButton
                    onClick={handleNext}
                    sx={{
                      position: "absolute",
                      top: "50%",
                      right: 0,
                      transform: "translateY(-50%)",
                    }}
                  >
                    <ArrowForwardIos fontSize="small" />
                  </IconButton>
                </>
              )}
              <MobileStepper
                variant="dots"
                steps={maxSteps}
                position="static"
                activeStep={activeStep}
                nextButton={null}
                backButton={null}
                sx={{ justifyContent: "center" }}
              />
            </>
          ) : (
            <Box
              height="100%"
              display="flex"
              justifyContent="center"
              alignItems="center"
              color="gray"
            >
              Sin imágenes
            </Box>
          )}
        </Box>

        {/* Contenido */}
        <CardContent>
          <Typography
            gutterBottom
            variant="h6"
            sx={{
              overflow: "hidden",
              textOverflow: "ellipsis",
              display: "-webkit-box",
              WebkitLineClamp: 1,
              WebkitBoxOrient: "vertical",
            }}
          >
            {data.titulo}
          </Typography>
          <Typography
            variant="body2"
            color="text.secondary"
            sx={{
              overflow: "hidden",
              textOverflow: "ellipsis",
              display: "-webkit-box",
              WebkitLineClamp: 2,
              WebkitBoxOrient: "vertical",
            }}
          >
            {data.descripcion}
          </Typography>
          <Typography variant="caption" color="text.secondary" display="block" mt={1}>
            Categoría: {data.categoria.nombre}
          </Typography>
          <Typography variant="caption" color="text.secondary">
            Publicado: {soloFecha}
          </Typography>
        </CardContent>

        {/* Acciones */}
        {actions && (
          <CardActions
            sx={{
              display: 'flex',
              flexDirection: { xs: 'column', md: 'row' },
              justifyContent: 'space-between',
              alignItems: 'stretch',
              gap: 1,
              mt: 'auto',
              px: 1,
              '& > button': {
                flex: 1,
                fontSize: '0.85rem',
                padding: '6px 8px',
                width: { xs: '100%', md: 'auto' },
                maxWidth: { xs: '100%', md: 'unset' },
              },
            }}
          >
            <Button size="small" component={Link} href={`/publicacion/${data.id}`}>
              Ver más
            </Button>
            <Button size="small" onClick={() => handleFav(data.id)}>
              Guardar
            </Button>
            {esAdmin && (
              <Button color="error" size="small" onClick={() => setConfirmOpen(true)}>
                Eliminar
              </Button>
            )}
            <Button size="small" onClick={() => setModalAbierto(true)}>
              Reportar
            </Button>
          </CardActions>
        )}

        {agregadoFav && (
          <Alert severity="success" sx={{ mb: 2, mx: 1 }}>
            {agregadoFav}
          </Alert>
        )}
      </Card>

      {/* Modal de confirmación de eliminación */}
      <Dialog open={confirmOpen} onClose={() => setConfirmOpen(false)}>
        <DialogTitle>¿Estás seguro?</DialogTitle>
        <DialogContent>
          <Typography>
            Esta acción eliminará la oferta definitivamente. ¿Querés continuar?
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmOpen(false)}>Cancelar</Button>
          <Button color="error" onClick={handleEliminar}>
            Sí, eliminar
          </Button>
        </DialogActions>
      </Dialog>

      {/* Modal de reporte */}
      <ModalReporte
        open={modalAbierto}
        onClose={() => setModalAbierto(false)}
        onConfirm={handleReportar}
      />
    </>
  );
}

</code>

src\components\Menu.tsx:
<code>
// components/BasicMenu.tsx

'use client'; // si usás Next.js App Router

import React, { useEffect, useState } from 'react';
import { Menu, MenuItem, Button } from '@mui/material';
import Link from 'next/link';
import { logOut } from '@/connect/auth';
import { jwtDecode } from 'jwt-decode';
import { TokenPayload } from '@/interfaces/TokenPayLoad';

const BasicMenu = () => {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const [esAdmin, setEsAdmin] = useState(false);
  const open = Boolean(anchorEl);

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

   useEffect(() => {
      if (typeof window !== 'undefined') {
        const token = localStorage.getItem("token");
        if (token) {
          const decoded = jwtDecode<TokenPayload>(token);
          setEsAdmin(decoded.rol === "ADMIN");
        }
      }
    }, []);




  return (
    <div>
      <Button
        id="basic-button"
        aria-controls={open ? 'basic-menu' : undefined}
        aria-haspopup="true"
        aria-expanded={open ? 'true' : undefined}
        onClick={handleClick}
        variant="outlined"
      >
        <p className="font-black">Menu</p>
      </Button>
      <Menu
        id="basic-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        MenuListProps={{
          'aria-labelledby': 'basic-button',
        }}
      >
        <Link href={'/publicar'}><MenuItem onClick={handleClose}><p className="font-bold">Publicar</p></MenuItem></Link>
        <Link href={'/faq'}><MenuItem onClick={handleClose}>F.A.Q.</MenuItem></Link>
        <Link href={'/perfil'}><MenuItem onClick={handleClose}>Mi perfil</MenuItem></Link>
        {esAdmin && (<Link href={'/admin'}><MenuItem onClick={handleClose}>Panel de control</MenuItem></Link>)}
        <Link href={'/login'}><MenuItem onClick={logOut}>Logout</MenuItem></Link>
      </Menu>
    </div>
  );
};

export default BasicMenu;





function setEsAdmin(arg0: boolean) {
  throw new Error('Function not implemented.');
}


</code>

src\components\MiniCard.tsx:
<code>
import React from 'react';
import { Box, Card, CardActionArea, CardContent, CardMedia, Typography } from '@mui/material';
import { Oferta } from '@/interfaces/Oferta';

interface MiniCardProps {
  oferta: Oferta
}

const MiniCard: React.FC<MiniCardProps> = ({ oferta}) => (
  <Card sx={{
    width: 200,           // ancho fijo
    height: 200,          // alto fijo
    borderRadius: 2,
    boxShadow: 1,
    display: 'flex',      // para usar flex interno
    flexDirection: 'column',
  }}>
    
      {oferta.imagenes.length > 0 ? (
        <CardMedia
          component="img"
          image={oferta.imagenes?.[0]}
          alt={oferta.titulo}
          sx={{
            width: '100%',           
            height: 140,             
            objectFit: 'cover',      
          }}
        />
      ): (
        <Box
              height="100%"
              display="flex"
              justifyContent="center"
              alignItems="center"
              color="gray"
            >
              Sin imágenes
            </Box>
      )}
      <CardContent sx={{
          flexGrow: 1,         
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'space-between',
        }}>
        <Typography variant="subtitle1" noWrap>
          {oferta.titulo}
        </Typography>
        {oferta.descripcion && (
          <Typography variant="body2" color="text.secondary" noWrap>
            {oferta.descripcion}
          </Typography>
        )}
      </CardContent>
    
  </Card>
);

export default MiniCard;

</code>

src\components\modal.tsx:
<code>
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Button,
} from "@mui/material";

interface Props {
  open: boolean;
  onClose: () => void;
  onConfirm: () => void;
  titulo: string;
  contenido: string | React.ReactNode;
  textoConfirmar: string;
  textoCancelar: string;
  disableConfirm?: boolean;
}

export default function ModalGenerico({
  open,
  onClose,
  onConfirm,
  titulo,
  contenido,
  textoConfirmar,
  textoCancelar,
  disableConfirm = false,
}: Props) {
  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>{titulo}</DialogTitle>
      <DialogContent>
        <DialogContentText>{contenido}</DialogContentText>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>{textoCancelar}</Button>
        <Button onClick={onConfirm} disabled={disableConfirm} color="error">
          {textoConfirmar}
        </Button>
      </DialogActions>
    </Dialog>
  );
}

</code>

src\components\modalReporte.tsx:
<code>
'use client';

import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
} from '@mui/material';
import { useState } from 'react';

interface Props {
  open: boolean;
  onClose: () => void;
  onConfirm: (motivo: string) => void;
}

export default function ModalReporte({ open, onClose, onConfirm }: Props) {
  const [motivo, setMotivo] = useState('');

  const handleConfirm = () => {
    if (motivo.trim() !== '') {
      onConfirm(motivo);
      setMotivo('');
    }
  };

  const handleClose = () => {
    setMotivo('');
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleClose}>
      <DialogTitle>Reportar publicación</DialogTitle>
      <DialogContent>
        <TextField
          autoFocus
          margin="dense"
          label="Motivo"
          type="text"
          fullWidth
          multiline
          value={motivo}
          onChange={(e) => setMotivo(e.target.value)}
        />
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose}>Cancelar</Button>
        <Button onClick={handleConfirm} variant="contained" color="error">
          Confirmar
        </Button>
      </DialogActions>
    </Dialog>
  );
}

</code>

src\components\OfrecerModal.tsx:
<code>
import {
    Box,
    Button,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    TextField,
  } from '@mui/material';
  import { useState } from 'react';
  
  interface OfrecerModalProps {
    open: boolean;
    onClose: () => void;
    onConfirm: (mensaje: string) => void;
  }
  
  export const OfrecerModal: React.FC<OfrecerModalProps> = ({ open, onClose, onConfirm }) => {
    const [mensaje, setMensaje] = useState('');
  
    const handleConfirm = () => {
      onConfirm(mensaje);
      setMensaje('');
      onClose();
    };
  
    return (
      <Dialog open={open} onClose={onClose}>
        <DialogTitle>Proponer un intercambio</DialogTitle>
        <DialogContent>
          <TextField
            label="Mensaje"
            multiline
            rows={4}
            fullWidth
            value={mensaje}
            onChange={(e) => setMensaje(e.target.value)}
            autoFocus
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose} color="secondary">
            Cancelar
          </Button>
          <Button onClick={handleConfirm} variant="contained" color="primary">
            Enviar
          </Button>
        </DialogActions>
      </Dialog>
    );
  };
  
  export default OfrecerModal;
  
</code>

src\components\OfrecimientosRecibidos.tsx:
<code>
// components/OfrecimientosList.tsx
import { Stack, Card, CardContent, Typography, Button, Alert } from "@mui/material";
import { Ofrecimiento } from "@/interfaces/Ofrecimiento";

interface Props {
  recibidos: Ofrecimiento[];
  onAceptar: (id: number) => void;
  onRechazar: (id: number) => void;
}

export default function OfrecimientosRecibidos({ recibidos, onAceptar, onRechazar }: Props) {
  if (recibidos.length === 0) {
    return <Typography>No recibiste ofrecimientos todavía.</Typography>;
  }

  return (
    <Stack spacing={2}>
      {recibidos.map(o => (
        <Card key={o.id}>
          <CardContent>
            <Typography><b>Oferta:</b> {o.oferta.titulo}</Typography>
            <Typography><b>Mensaje:</b> {o.mensaje || "—"}</Typography>
            <Typography><b>De:</b> {o.usuario.nombre}</Typography>
            <Typography><b>Estado:</b> {o.estado}</Typography>
            {o.estado === "PENDIENTE" ? (
              <Stack direction="row" spacing={1} mt={1}>
                <Button variant="contained" onClick={() => onAceptar(o.id)}>Aceptar</Button>
                <Button variant="outlined" color="error" onClick={() => onRechazar(o.id)}>Rechazar</Button>
              </Stack>
            ) : o.estado === "ACEPTADO" && o.contacto ? (
              <Alert severity="success" sx={{ mt: 1 }}>
                Contacto: {o.contacto.nombre}, {o.contacto.correo}
              </Alert>
            ) : null}
          </CardContent>
        </Card>
      ))}
    </Stack>
  );
}

</code>

src\components\Publicar.tsx:
<code>
"use client";

import {
  TextField,
  Button,
  Typography,
  Box,
  Select,
  MenuItem,
  Paper,
  IconButton,
} from "@mui/material";
import { crearOferta } from "@/connect/ofertas";
import { useEffect, useState } from "react";
import { obtenerCategorias } from "@/connect/categorias";
import { Categoria } from "@/interfaces/Categoria";
import { jwtDecode } from "jwt-decode";
import { TokenPayload } from "@/interfaces/TokenPayLoad";
import { Close } from "@mui/icons-material";

const PublicarOferta: React.FC = () => {
  const [titulo, setTitulo] = useState("");
  const [descripcion, setDescripcion] = useState("");
  const [cambio, setCambio] = useState("");
  const [files, setFiles] = useState<FileList | null>(null);
  const [categorias, setCategorias] = useState<Categoria[]>([]);
  const [categoria, setCategoria] = useState(0);
  const [userId, setUserId] = useState<number | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (userId === null) {
      console.error("Usuario no identificado");
      return;
    }

    try {
      const data = await crearOferta(
        titulo,
        descripcion,
        cambio,
        files,
        categoria,
        "ACTIVA",
        userId
      );
      console.log("Oferta creada:", data);
      setTitulo("");
      setDescripcion("");
      setFiles(null);
      window.location.href = "/";
    } catch (err) {
      console.error("Error al crear la oferta:", err);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFiles(e.target.files);
  };

const removeImage = (indexToRemove: number) => {
  if (!files) return;

  const dt = new DataTransfer();
  Array.from(files).forEach((file, index) => {
    if (index !== indexToRemove) {
      dt.items.add(file);
    }
  });

  setFiles(dt.files);
};

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      const decoded = jwtDecode<TokenPayload>(token);
      setUserId(decoded.sub);
    }
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await obtenerCategorias();
        setCategorias(data);
      } catch (err) {
        console.error("Error al obtener categorias desde publicar.tsx", err);
      }
    };
    fetchData();
  }, []);

  return (
  <Box display="flex" height="100vh" p={2} sx={{ backgroundColor: "white" }}>
    {/* Sección de formulario */}
    <Box
      component="form"
      onSubmit={handleSubmit}
      sx={{
        flex: 2,
        display: "flex",
        flexDirection: "column",
        gap: 2,
        pr: 2,
        overflowY: "auto",
      }}
    >
      <Typography variant="h5" sx={{ color: "black" }}>
        Publicar nueva oferta
      </Typography>

      <TextField
        label="Título del elemento"
        required
        fullWidth
        value={titulo}
        onChange={(e) => setTitulo(e.target.value)}
      />

      <TextField
        label="Descripción"
        multiline
        rows={4}
        required
        fullWidth
        value={descripcion}
        onChange={(e) => setDescripcion(e.target.value)}
      />

      <Select
        labelId="categorias"
        value={categoria}
        onChange={(e) => setCategoria(e.target.value)}
      >
        {categorias.map((categoria) => (
          <MenuItem key={categoria.id} value={categoria.id}>
            {categoria.nombre}
          </MenuItem>
        ))}
      </Select>

      <Button variant="outlined" component="label">
        Subir imágenes
        <input
          hidden
          accept="image/*"
          multiple
          type="file"
          onChange={handleFileChange}
        />
      </Button>

      {/* Contador de imagenes seleccionadas */}

      {files && files.length > 0 && (
        <Typography variant="body2" color="textSecondary">
          {files.length} imagen{files.length > 1 ? "es" : ""} seleccionada
          {files.length > 1 ? "s" : ""} (máximo 3)
        </Typography>
      )}

      <TextField
        label="¿Qué te gustaría recibir a cambio?"
        multiline
        rows={2}
        fullWidth
        value={cambio}
        onChange={(e) => setCambio(e.target.value)}
      />

      <Button variant="contained" color="primary" type="submit">
        Publicar
      </Button>
    </Box>

    {/* Sección de Vista Previa de imagenes */}
    <Box
      sx={{
        flex: 1,
        maxHeight: "100%",
        overflowY: "auto",
        borderLeft: "1px solid #ddd",
        pl: 2,
      }}
    >
      <Typography variant="h6" sx={{ mb: 1, color: "black" }}>
        Vista previa de imagenes
      </Typography>

      {files && (
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            gap: 2,
          }}
        >
          {Array.from(files).map((file, index) => (
            <Box
              key={index}
              sx={{
                position: "relative",
                width: "100%",
                height: 150,
              }}
            >
              <IconButton
                size="small"
                onClick={() => removeImage(index)}
                sx={{
                  position: "absolute",
                  top: 4,
                  right: 4,
                  zIndex: 1,
                  backgroundColor: "white",
                  border: "1px solid #ccc",
                }}
              >
                <Close fontSize="small" />
              </IconButton>
              <img
                src={URL.createObjectURL(file)}
                alt={`preview-${index}`}
                style={{
                  width: "100%",
                  height: "100%",
                  objectFit: "contain",
                  borderRadius: 4,
                }}
              />
            </Box>
          ))}
        </Box>
      )}
    </Box>
  </Box>
);

}

export default PublicarOferta;


</code>

src\components\Recuperar.tsx:
<code>
'use client';

import { cambiarPassword, solicitarCodigoRecuperacion } from "@/connect/auth";
import { Alert, Box, Button, TextField, Typography } from "@mui/material";
import { useState } from "react";

const Recuperar: React.FC = () => {
    
const [correo, setCorreo] = useState('');
const [mensaje, setMensaje] = useState('');
const [error, setError] = useState('');
const [codigo, setCodigo] = useState('');
const [nuevaPass, setNuevaPass] = useState('');




const enviarSolicitud = async () => {
    try {
      const data = await solicitarCodigoRecuperacion(correo);
      setMensaje(data.mensaje || 'Código de recuperación generado.');
      setError('');
    } catch (err: any) {
      setError(err.response?.data?.message || 'Error al generar código');
      setMensaje('');
    }
  };
    
    
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await cambiarPassword(correo, codigo, nuevaPass);
      
      window.location.href = '/login';
    } catch (error) {
      setError('Codigo incorrecto');
      setMensaje('');
      
    }
  };
    
    
    
    
    
    
    
    
    
    
    return (
        <Box
        sx={{
          maxWidth: 400,
          mx: 'auto',
          mt: 8,
          p: 4,
          bgcolor: 'white',
          borderRadius: 2,
          boxShadow: 3,
        }}
      >
        <Typography variant="h6" gutterBottom>
          Recuperar contraseña
        </Typography>
      
        {/* Paso 1: Enviar código */}
        <TextField
          label="Correo electrónico"
          variant="outlined"
          fullWidth
          value={correo}
          onChange={(e) => setCorreo(e.target.value)}
          sx={{ mb: 2 }}
        />
      
        <Button variant="contained" fullWidth onClick={enviarSolicitud}>
          Enviar código
        </Button>
      
        {mensaje && <Alert severity="success" sx={{ mt: 2 }}>{mensaje}</Alert>}
        {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
      
        {/* Separador visual */}
        <Box sx={{ my: 3, borderTop: '1px solid #ddd' }} />
      
        {/* Paso 2: Cambiar contraseña */}
        <Typography variant="subtitle1" gutterBottom>
          Ingresar código y nueva contraseña
        </Typography>
      
        <TextField
          label="Código"
          variant="outlined"
          fullWidth
          value={codigo}
          onChange={(e) => setCodigo(e.target.value)}
          sx={{ mb: 2 }}
        />
      
        <TextField
          label="Nueva contraseña"
          variant="outlined"
          fullWidth
          type="password"
          value={nuevaPass}
          onChange={(e) => setNuevaPass(e.target.value)}
          sx={{ mb: 2 }}
        />
      
        <Button variant="contained" color="success" fullWidth onClick={handleSubmit}>
          Cambiar contraseña
        </Button>
      </Box>
      
      
    )
}


export default Recuperar;
</code>

src\components\Register.tsx:
<code>
'use client'
import React from 'react'
import { useState} from 'react'

import { registerFunction } from '@/connect/auth'



const RegisterPage: React.FC = () => {
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

 const manejarSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  await registerFunction(name, email, password);
  window.location.href = '/login';
};
  

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-800">
      <form onSubmit={manejarSubmit} className="bg-white p-8 rounded-2xl shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center text-black">Registrarse</h2>

        <div className="mb-4">
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">
            Nombre
          </label>
          <input
            id="name"
            type="text"
            required
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
          />
        </div>

        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            id="email"
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
          />
        </div>

        <div className="mb-6">
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">
            Contraseña
          </label>
          <input
            id="password"
            type="password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
          />
        </div>

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition"
        >
          Registrarse
        </button>

        <div className="text-center mt-4 text-sm text-gray-600">
          ¿Ya tenés cuenta? <a href="/login" className="text-blue-600 hover:underline">Iniciá sesión</a>
        </div>
      </form>
    </div>
  )
}

export default RegisterPage

</code>

src\components\reportesAdmin.tsx:
<code>
'use client';

import { Reporte } from '@/interfaces/reporte';
import { Box, Button, Paper, Typography, Link } from '@mui/material';

interface Props {
  reportes: Reporte[];
}

export default function ReportesAdmin({ reportes }: Props) {
  if (reportes.length === 0) {
    return <Typography color="white">No hay reportes</Typography>;
  }

  return (
    <Box>
      <Typography variant="h5" gutterBottom color="white">
        Ofertas reportadas
      </Typography>

      {reportes.map((reporte, idx) => (
        <Paper key={idx} sx={{ p: 2, mb: 2 }}>
          <Typography variant="subtitle1" fontWeight="bold">
            Oferta: {reporte.oferta?.titulo}
          </Typography>
          <Typography variant="body2">
            Usuario que reportó: {reporte.usuario?.nombre} ({reporte.usuario?.correo})
          </Typography>
          <Typography variant="body2">Motivo: {reporte.motivo}</Typography>
          <Typography variant="caption" color="gray">
            Fecha: {new Date(reporte.fechaReporte).toLocaleString()}
          </Typography>
          <Link href={`/publicacion/${reporte.oferta?.id}`}>
            <Button variant="text" color="primary">
              Ver oferta
            </Button>
          </Link>
        </Paper>
      ))}
    </Box>
  );
}

</code>

src\components\SelectTag.tsx:
<code>
'use client';

import * as React from 'react';
import { useEffect, useState } from 'react';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import Checkbox from '@mui/material/Checkbox';
import ListItemText from '@mui/material/ListItemText';
import { obtenerCategorias } from '@/connect/categorias';

type Categoria = {
  id: number;
  nombre: string;
};

interface Props {
  onChange: (selectedIds: string[]) => void;
}

export default function MultipleSelectCheckmarks({ onChange }: Props) {
  const [categorias, setCategorias] = useState<Categoria[]>([]);
  const [selected, setSelected] = useState<string[]>([]);

  useEffect(() => {
    const fetchData = async () => {
    try {
      const data = await obtenerCategorias();
      setCategorias(data);
    } catch (err) {
      console.error("Error al obtener categorias!", err);
    }
  };

  fetchData();

  }, []);

  const handleChange = (event:   SelectChangeEvent<string[]>) => {
    const value = event.target.value as string[];
    setSelected(value);
    onChange(value);
  };

  return (
    <FormControl sx={{ minWidth: 150 }}>
      <InputLabel id="multiple-checkbox-label">Categorías</InputLabel>
      <Select
        labelId="multiple-checkbox-label"
        multiple
        value={selected}
        onChange={handleChange}
        renderValue={(selected) =>
          categorias
            .filter((cat) => selected.includes(cat.id.toString()))
            .map((cat) => cat.nombre)
            .join(', ')
        }
      >
        {categorias.map((cat) => (
          <MenuItem key={cat.id} value={cat.id.toString()}>
            <Checkbox checked={selected.includes(cat.id.toString())} />
            <ListItemText primary={cat.nombre} />
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
}

</code>

src\components\usuariosAdmin.tsx:
<code>
'use client';

import { activarUsuario, desactivarUsuario, eliminarUsuario } from '@/connect/users';
import { Props } from '@/interfaces/Props';
import {
    Box,
    Button,
    List,
    ListItem,
    ListItemText,
    Paper,
    Stack,
    Typography,
    Snackbar,
    Alert,
} from '@mui/material';
import { useState } from 'react';







export default function UsuariosAdmin({
    usuarios,
    paginaActual,
    totalPaginas,
    setPaginaActual,
}: Props) {




    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [snackbarMsg, setSnackbarMsg] = useState('');


    const mostrarSnackbar = (mensaje: string) => {
        setSnackbarMsg(mensaje);
        setSnackbarOpen(true);
    };

    const handleCloseSnackbar = () => {
        setSnackbarOpen(false);
    };

    
    
    
    return (
        <Box mb={5}>
            <Typography variant="h5" gutterBottom color="white">
                Usuarios
            </Typography>
            <List>
                {usuarios?.map((user) => (
                    <Paper key={user.id} sx={{ p: 2, mb: 2 }}>
                        <ListItem disablePadding>
                            <ListItemText
                                primary={`${user.nombre} (${user.correo})`}
                                secondary={`Estado: ${user.estado}`}
                            />
                        </ListItem>
                        <Stack direction="row" spacing={2} mt={1}>

                            {user.estado === 'ACTIVO' ? (
                                <Button
                                    variant="outlined"
                                    onClick={async () => {
                                        try {
                                            await desactivarUsuario(user.id);
                                            mostrarSnackbar(`Usuario "${user.nombre}" desactivado`);
                                        } catch (error) {
                                            mostrarSnackbar(`Error al desactivar "${user.nombre}"`);
                                        }
                                    }}
                                >
                                    Desactivar
                                </Button>
                            ) : (
                                <Button
                                    variant="outlined"
                                    onClick={async () => {
                                        await activarUsuario(user.id);
                                        mostrarSnackbar(`Usuario "${user.nombre}" activado`);
                                    }}
                                >
                                    Activar
                                </Button>
                            )}

                            <Button
                                variant="outlined"
                                color="error"
                                onClick={async () => {
                                    await eliminarUsuario(user.id);
                                    mostrarSnackbar(`Usuario "${user.nombre}" eliminado`);
                                }}
                            >
                                Eliminar
                            </Button>
                        </Stack>
                    </Paper>
                ))}
            </List>

            <Stack direction="row" justifyContent="center" spacing={2} mt={2}>
                <Button
                    variant="outlined"
                    onClick={() => setPaginaActual(Math.max(paginaActual - 1, 1))}
                    disabled={paginaActual === 1}
                >
                    Anterior
                </Button>

                <Typography color="white" sx={{ alignSelf: 'center' }}>
                    Página {paginaActual} de {totalPaginas}
                </Typography>

                <Button
                    variant="outlined"
                    onClick={() => setPaginaActual(Math.min(paginaActual + 1, totalPaginas))}
                    disabled={paginaActual === totalPaginas}
                >
                    Siguiente
                </Button>
            </Stack>
            <Snackbar
                open={snackbarOpen}
                autoHideDuration={3000}
                onClose={handleCloseSnackbar}
                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
            >
                <Alert onClose={handleCloseSnackbar} severity="info" sx={{ width: '100%' }}>
                    {snackbarMsg}
                </Alert>
            </Snackbar>
        </Box>


    );
}

</code>

src\connect\auth.ts:
<code>
import { TokenPayload } from "@/interfaces/TokenPayLoad";
import axios from "axios";
import { jwtDecode } from "jwt-decode";




export const validarToken = async (): Promise<boolean> => {
  const token = localStorage.getItem('token');
  if (!token) return false;

  try {
    const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/auth/validate`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    return res.data === true;
  } catch (error) {
    console.log("Error al validar token",error)
    return false;
  }
};



export const loguearse = async (
  correo: string,
  password: string
): Promise<{ ok: boolean; error?: string }> => {
  try {
    const response = await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/auth/login`, {
      correo,
      password,
    });

    const token = response.data.access_token;
    if (token) {
      localStorage.setItem('token', token);
      localStorage.setItem('nombre', response.data.nombre);
      return { ok: true };
    }

    return { ok: false, error: 'Token no recibido' };
  } catch (error: any) {
    // Obtené mensaje del backend o de Axios
    const mensaje =
      error?.response?.data?.message || 'Error al iniciar sesión';
    return { ok: false, error: mensaje };
  }
};


 export const logOut =  () => {

    localStorage.removeItem('token')
    localStorage.removeItem('nombre')

    window.location.href = '/login'
}

export const registerFunction = async (nombre:string, correo: string, password: string): Promise<void> => {
  try {
     await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/usuarios`, {
      nombre,
        correo,
      password,
      rol:'NORMAL',
      estado: 'ACTIVO'
    });
    
    
  } catch (error) {
    console.log(error);
    
  }


};


export const solicitarCodigoRecuperacion = async (correo: string) => {
  const response = await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/auth/recovery`, {
    correo,
  });
  return response.data;
};

export const cambiarPassword = async (correo: string, codigo: string, nuevaPass: string) => {
  const response = await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/auth/reset-password`, {
    correo,
    codigo,
    nuevaPass
  });

  return response.data;
};

export const obtenerIdActual =  () => {
  const token = localStorage.getItem('token')

  if(token){
    const decoded = token ? jwtDecode<TokenPayload>(token) : null;
    return decoded?.sub;
  }else{
    return false
  }

}
</code>

src\connect\categorias.ts:
<code>
import axios from "axios";

export const obtenerCategorias = async () => {
  try {
    const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/categorias`);
    return res.data;
  } catch (error) {
    console.error("Error al cargar categorías:", error);
  }
};

export const eliminarCategoria = async (id: number) => {
  try{
  return axios.delete(`${process.env.NEXT_PUBLIC_BACK_URL}/categorias/${id}`);
}catch(error){
  return error
}
};

export const crearCategoria = async (nombre: string) => {
  try {
    await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/categorias/`, { nombre });
  } catch (e) {
    console.error("Error al eliminar categoría:", e);
  }
};

</code>

src\connect\favs.ts:
<code>
import axios from "axios";

export const guardarFavorito = async (ofertaId: number) => {
  const token = localStorage.getItem("token");

  await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/favoritos/${ofertaId}`, null, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
};




export const obtenerFavoritos = async () => {
  const token = localStorage.getItem("token");

  return await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/favoritos/`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
};
</code>

src\connect\ofertas.ts:
<code>
import axios from 'axios'



export const obtenerOfertas = async () => {
  const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/ofertas`,{
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  })
  return res.data
}

export const obtenerOfertasPropias = async (id: number, estado?: string) => {
  const response = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/ofertas`, {
    params: {
      usuario_id: id,
      estado,
    },
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  });

  return response.data;
};


export const buscarOfertas = async (
  categoriaId?: string,
  keywords?: string
) => {
  const params = new URLSearchParams();
  if (categoriaId) params.append('categoria_id', categoriaId);
  if (keywords) params.append('keywords', keywords);

  const token = localStorage.getItem('token');
  const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/ofertas/buscar?${params.toString()}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  return res.data;
};





export const borrarOferta = async (id:number) => {
  const res = await axios.delete(`${process.env.NEXT_PUBLIC_BACK_URL}/ofertas/${id}`,{
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  })

  return res.data
}


export const obtenerUnaOferta = async (id:number) => {
  const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/ofertas/${id}`,{
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  })
  return res.data
}


export const crearOferta = async (
  titulo: string,
  descripcion: string,
  cambio:string,
  files: FileList | null,
  categoria_id: number,
  estado: string,
  usuario_id: number
) => {
  const formData = new FormData();
  formData.append('titulo', titulo);
  formData.append('descripcion', descripcion);
  formData.append('cambio', cambio);
  formData.append('categoria_id',categoria_id.toString() )
  formData.append('estado', estado)
  formData.append('usuario_id', usuario_id.toString())


  if (files) {
    for (let i = 0; i < files.length; i++) {
      formData.append('imagenes', files[i]);
    }
  }

  const response = await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/ofertas`, formData, {
    headers: { 'Content-Type': 'multipart/form-data',
              'Authorization': `Bearer ${localStorage.getItem('token')}`
     },
  });

  return response.data;
};

export const pausarOferta = async (id: number) => {
  const res = await axios.patch(
    `${process.env.NEXT_PUBLIC_BACK_URL}/ofertas/${id}/pausar`,
    {},
    {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    }
  );
  return res.data;
};

export const despausarOferta = async (id: number) => {
  const res = await axios.patch(
    `${process.env.NEXT_PUBLIC_BACK_URL}/ofertas/${id}/despausar`,
    {},
    {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    }
  );
  return res.data;
};

export const finalizarOferta = async (id: number) => {
  const res = await axios.patch(
    `${process.env.NEXT_PUBLIC_BACK_URL}/ofertas/${id}/finalizar`,
    {},
    {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    }
  );
  return res.data;
};
</code>

src\connect\ofrecimientos.ts:
<code>
import { Ofrecimiento } from '@/interfaces/Ofrecimiento';
import axios from 'axios';

export const obtenerOfrecimientosRecibidos = async (): Promise<Ofrecimiento[]> => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://localhost:3001/ofrecimientos/recibidos', {
      headers: { Authorization: `Bearer ${token}` },
    });
    return response.data;
  };

  export const aceptarOfrecimiento = async (id: number) => {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("Token no encontrado");
  
    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_BACK_URL}/ofrecimientos/${id}/aceptar`,
      {},
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );
  
    return response.data; // acá devolvés los datos actualizados del ofrecimiento
  };
  
  export const rechazarOfrecimiento = async (id: number) => {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("Token no encontrado");
  
    await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/ofrecimientos/${id}/rechazar`, {}, {
      headers: { Authorization: `Bearer ${token}` }
    });
  };


export const obtenerOfrecimientosEnviados = async (): Promise<Ofrecimiento[]> => {
    const response = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/ofrecimientos/enviados`, {
      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
    });
    return response.data;
  };

  



  export const crearOfrecimiento = async (
    oferta_id: number,
    mensaje: string
  ) => {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("Token no encontrado");
  
    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_BACK_URL}/ofrecimientos`,
      {
        oferta_id,
        mensaje,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
  
    return response.data;
  };
  
  
</code>

src\connect\register.ts:
<code>
import axios from "axios";

const manejarSubmit = async (e: React.FormEvent, name:string, email:string, password:string) => {
  e.preventDefault();

  try {
    console.log("Enviando datos:", { name, email, password });
    const response = await axios.post(`${process.env.NEXT_PUBLIC_BACK_URL}/usuarios`, {
      nombre: name,
      correo: email,
      password: password,
      rol: "NORMAL",
      estado: "ACTIVO"
    });

    console.log("Usuario creado:", response.data);
    window.location.replace("/login");
    
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error("Error al crear usuario:", error.response?.data || error.message);
    } else {
      console.error("Error desconocido:", error);
    }
  }
};


export {manejarSubmit}
</code>

src\connect\reporte.ts:
<code>
import axios from "axios"



export const reportarOferta = async (ofertaId: number, motivo: string) => {
    const token = localStorage.getItem("token");
  
    return await axios.post(
      `${process.env.NEXT_PUBLIC_BACK_URL}/reportes`,
      {
        oferta_id: ofertaId,
        motivo: motivo,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
  };




  export const obtenerReportes = async () => {
    const token = localStorage.getItem("token");
  
    return await axios.get(
      `${process.env.NEXT_PUBLIC_BACK_URL}/reportes`,
      
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
  };
</code>

src\connect\users.ts:
<code>
import axios from "axios"

export const obtenerUsuarios = async () => {
  const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/usuarios`,{
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  })
  return res.data
}

export const obtenerUsuario = async (id:number) => {
  const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/usuarios/me`,{
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  })
  return res.data
}


export const desactivarUsuario = async (id:number) => {
  console.log("intentando desactivar:",id)
  const res = await axios.patch(
    `${process.env.NEXT_PUBLIC_BACK_URL}/usuarios/${id}/desactivar`,
    {}, 
    {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    }
  )
  return res.data
}

export const activarUsuario = async (id:number) => {
  const res = await axios.patch(
    `${process.env.NEXT_PUBLIC_BACK_URL}/usuarios/${id}/activar`,
    {}, 
    {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    }
  )
  return res.data
}


export const eliminarUsuario = async (id:number) => {
  const res = await axios.delete(
    `${process.env.NEXT_PUBLIC_BACK_URL}/usuarios/${id}`,
    {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    }
  )
  return res.data
}

export const obtenerUsuariosPaginado = async (page = 1, limit = 5) => {
  const res = await axios.get(`${process.env.NEXT_PUBLIC_BACK_URL}/usuarios/paginado?page=${page}&limit=${limit}`, {
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  });
  return res.data;
};
</code>

src\containers\AdminCategoriasContainer.tsx:
<code>
'use client';

import CatAdmin from '@/components/catAdmin';
import { useCategorias } from '@/hooks/useCategorias';
import { Categoria } from '@/interfaces/Categoria';

interface Props {
  onError: (mensaje: string) => void;
}

export default function AdminCategoriasContainer({ onError }: Props) {
  const {
    categorias,
    loading,
    createCategoria,
    deleteCategoria,
  } = useCategorias(onError);

  return (
    <>
      {loading && <p>Cargando categorías...</p>}
      <CatAdmin
        categorias={categorias}
        onCrear={(nombre) => createCategoria(nombre)}
        onEliminar={(cat: Categoria) => deleteCategoria(cat.id)}
      />
    </>
  );
}
</code>

src\containers\AdminReportesContainer.tsx:
<code>
'use client';

import { useReportes } from '@/hooks/useReportes';
import ReportesAdmin from '@/components/reportesAdmin';

interface Props {
  onError?: (msg: string) => void;
}

export default function AdminReportesContainer({ onError }: Props) {
  const { reportes } = useReportes(onError);

  return <ReportesAdmin reportes={reportes} />;
}

</code>

src\containers\AdminUsuariosContainer.tsx:
<code>
import UsuariosAdmin from "@/components/usuariosAdmin";
import { useUsuarios } from "@/hooks/useUsuarios";
import { useState } from "react";

export default function AdminUsuariosContainer({ onError }: { onError: (msg: string) => void }) {
    const [paginaActual, setPaginaActual] = useState(1);
    const itemsPorPagina = 5;
    
    const { usuarios, totalPaginas } = useUsuarios(paginaActual, itemsPorPagina,onError);
  
    return (
      <UsuariosAdmin
        usuarios={usuarios}
        paginaActual={paginaActual}
        totalPaginas={totalPaginas}
        setPaginaActual={setPaginaActual}
      />
    );
  }
  
</code>

src\containers\PerfilOfrecimientosRecibidosContainer.tsx:
<code>
// containers/OfrecimientosRecibidosContainer.tsx
import { useEffect, useState } from "react";
import { Ofrecimiento } from "@/interfaces/Ofrecimiento";
import { obtenerOfrecimientosRecibidos, aceptarOfrecimiento, rechazarOfrecimiento } from "@/connect/ofrecimientos";
import OfrecimientosRecibidos from "../components/OfrecimientosRecibidos";
import { Typography } from "@mui/material";

export default function OfrecimientosRecibidosContainer() {
  const [recibidos, setRecibidos] = useState<Ofrecimiento[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    obtenerOfrecimientosRecibidos()
      .then(list => setRecibidos(list.filter(o => o.estado === "PENDIENTE")))
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  }, []);

  const handleAceptar = async (id: number) => {
    const data = await aceptarOfrecimiento(id);
    setRecibidos(rs =>
      rs.map(o => (o.id === id ? { ...o, estado: "ACEPTADO", contacto: data.contacto } : o))
    );
  };

  const handleRechazar = async (id: number) => {
    await rechazarOfrecimiento(id);
    setRecibidos(rs =>
      rs.map(o => (o.id === id ? { ...o, estado: "RECHAZADO" } : o))
    );
  };

  if (loading) return <Typography>Cargando ofrecimientos…</Typography>;
  if (error)   return <Typography color="error">{error}</Typography>;

  return (
    <section className="mt-8">
      <Typography variant="h6">Ofrecimientos recibidos</Typography>
      <OfrecimientosRecibidos
        recibidos={recibidos}
        onAceptar={handleAceptar}
        onRechazar={handleRechazar}
      />
    </section>
  );
}

</code>

src\hooks\useAuth.ts:
<code>

import { useEffect } from 'react';
import { validarToken } from '@/connect/auth';

export const useAuthRedirect = () => {
  useEffect(() => {
    const verificar = async () => {
      const valido = await validarToken();
      if (!valido) {
        window.location.href = '/login';
      }
    };
    verificar();
  }, []);
};

</code>

src\hooks\useCategorias.ts:
<code>
import { useState, useEffect } from 'react';
import {
  obtenerCategorias,
  crearCategoria as apiCrearCategoria,
  eliminarCategoria as apiEliminarCategoria,
} from '@/connect/categorias';
import { Categoria } from '@/interfaces/Categoria';

export const useCategorias = (onError?: (msg: string) => void) => {
  const [categorias, setCategorias] = useState<Categoria[]>([]);
  const [loading, setLoading] = useState(false);

  const loadCategorias = async () => {
    setLoading(true);
    try {
      const data = await obtenerCategorias();
      setCategorias(data);
    } catch (error: any) {
      const msg = error?.message || 'desconocido';
      onError?.(`Error al cargar categorías: ${msg}`);
    } finally {
      setLoading(false);
    }
  };

  const createCategoria = async (nombre: string) => {
    try {
      await apiCrearCategoria(nombre);
      await loadCategorias();
    } catch (error: any) {
      const msg = error?.message || 'desconocido';
      onError?.(`Error al crear categoría: ${msg}`);
    }
  };

  const deleteCategoria = async (id: number) => {
    try {
      await apiEliminarCategoria(id);
      setCategorias((prev) => prev.filter((c) => c.id !== id));
    } catch (error: any) {
      const msg =
        error?.response?.data?.message || error?.message || 'desconocido';
      onError?.(`Error al eliminar categoría: ${msg}`);
    }
  };

  useEffect(() => {
    loadCategorias();
  }, []);

  return {
    categorias,
    loading,
    createCategoria,
    deleteCategoria,
    reload: loadCategorias,
  };
};
</code>

src\hooks\useReportes.ts:
<code>
import { useEffect, useState } from 'react';
import { obtenerReportes } from '@/connect/reporte';
import { Reporte } from '@/interfaces/reporte';

export function useReportes(onError?: (msg: string) => void) {
  const [reportes, setReportes] = useState<Reporte[]>([]);
  const [cargando, setCargando] = useState(true);

  useEffect(() => {
    const fetch = async () => {
      try {
        const res = await obtenerReportes();
        setReportes(res.data);
      } catch (error) {
        
        if (onError) onError('Error al obtener reportes');
      } finally {
        setCargando(false);
      }
    };

    fetch();
  }, []);

  return { reportes, cargando };
}


</code>

src\hooks\useUsuarios.ts:
<code>
import { obtenerUsuariosPaginado } from "@/connect/users";
import { Usuario } from "@/interfaces/Usuario";
import { useEffect, useState } from "react";

export function useUsuarios(paginaActual: number, itemsPorPagina: number, onError?: (mensaje: string) => void) {
    const [usuarios, setUsuarios] = useState<Usuario[]>([]);
    const [totalPaginas, setTotalPaginas] = useState(1);
  
    useEffect(() => {
      const fetchUsuarios = async () => {
        try {
          const res = await obtenerUsuariosPaginado(paginaActual, itemsPorPagina);
          setUsuarios(res.data);
          setTotalPaginas(Math.ceil(res.total / itemsPorPagina));
        } catch (error: any) {
          if(onError)
            onError(`Error cargando los usuarios, codigo: ${error.response.status}`)
        }
      };
  
      fetchUsuarios();
    }, [paginaActual]);
  
    return { usuarios, totalPaginas };
  }
</code>

src\interfaces\Categoria.ts:
<code>
export interface Categoria {
    id: number
    nombre: string
  }
</code>

src\interfaces\DataPerfil.ts:
<code>
import { Oferta } from "./Oferta";
import { Ofrecimiento } from "./Ofrecimiento";
import { Usuario } from "./Usuario";

export interface DataPerfil {
    perfil: Usuario | null;
    ofertasPropias: Oferta[];
    favoritos: Oferta[];
    pausadas: Oferta[];
    enviados: Ofrecimiento[];
    recibidos: Ofrecimiento[];
    loading: boolean;
    error: string | null;
  }
</code>

src\interfaces\Oferta.ts:
<code>
import { Categoria } from "./Categoria"
import { Usuario } from "./Usuario"

export interface Oferta {
    id: number
    titulo: string
    descripcion: string
    cambio: string
    imagenes: string[]
    categoria: Categoria
    fechaPublicacion: string
    estado: string
    usuario: Usuario
  }
</code>

src\interfaces\Ofrecimiento.ts:
<code>
import { Oferta } from "./Oferta";
import { Usuario } from "./Usuario";

export interface Ofrecimiento {
  id: number;
  mensaje: string;
  estado: string;
  usuario: Usuario;
  oferta: Oferta;
  contacto?: {
    nombre: string;
    correo: string;
    telefono: string;
  };
}

  
</code>

src\interfaces\Props.ts:
<code>
import { Usuario } from "./Usuario";

export interface Props {
    usuarios: Usuario[];
    paginaActual: number;
    totalPaginas: number;
    setPaginaActual: (pagina: number) => void;
}
</code>

src\interfaces\reporte.ts:
<code>
import { Usuario } from "./Usuario";
import { Oferta } from "./Oferta";

export interface Reporte {
  id: number;
  usuario: Usuario;
  oferta: Oferta;
  motivo: string;
  fechaReporte: string; 
}
</code>

src\interfaces\TokenPayLoad.ts:
<code>
export interface TokenPayload {
  sub: number;
  email: string;
  rol: string;
}
</code>

src\interfaces\Usuario.ts:
<code>
export interface Usuario {
    id: number
    nombre: string
    correo: string
    password: string
    rol: "ADMIN" | "REGULAR"
    estado: "ACTIVO" | "INACTIVO"
    fecha_creacion: string // o Date si usás objetos Date
  }
</code>

